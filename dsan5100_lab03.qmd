---
title: 'DSAN 5100 Lab 3'
author: "Dr. Purna Gamage"
format: 
  html: 
    embed-resources: true
    toc: true
    html-math-method: mathjax
    link-external-newwindow: true
    link-external-icon: true
---

## Initialization Code

Here we make sure to set R's random seed to `5100`, then import the `ggplot2` library and change its default theme (since `theme_classic()` more closely mirrors base R's plot style!)

```{r}
set.seed(5100)
library(ggplot2)
ggplot2::theme_set(ggplot2::theme_classic())
```

# Explanation: 

# 1. set.seed(5100):

# This line sets the random number generator's seed to 5100.
# In R, the random number generator produces a sequence of random numbers. Setting the seed ensures that the same sequence of random numbers is generated each time you run the code with the same seed value.
# This is useful for reproducibility, as it allows you to get exactly the same results if you need to rerun the analysis later.
# 2. library(ggplot2):

# This line loads the ggplot2 library, which is a powerful and popular package for creating visualizations in R.
# Once loaded, you can use ggplot2's functions and objects to create various types of plots, such as scatter plots, bar charts, line charts, and more.
# 3. ggplot2::theme_set(ggplot2::theme_classic()):

# This line changes the default theme for ggplot2 plots to theme_classic().
# A theme defines the overall appearance of a plot, including elements like fonts, colors, background, and axis labels.
# theme_classic() is a pre-defined theme that provides a clean and minimalist look, similar to the style of base R plots.
# By setting this theme as the default, all subsequent plots created using ggplot2 will automatically use this theme unless you explicitly specify a different one.
# Overall, this code snippet:

# Sets a random seed for reproducibility.
# Loads the ggplot2 library for creating visualizations.
# Changes the default theme of ggplot2 plots to theme_classic().
# This initialization is often performed at the beginning of an R script or analysis to set up the environment and ensure consistent results.


## Question 1

# Use either the base R `plot()` function or the `ggplot2` library to plot probability mass histograms for the following discrete distributions, using the parameter values provided within each part (to avoid ambiguity in parameter names, a link to the Wikipedia page for each distribution is provided, so that you can use the sidebar in the article to find definitions for each parameter).

# To help you see what we're looking for, the solution to Question 1.1 is already provided for you, using both the base R `plot()` function as well as the `ggplot2` library. Note that you do **not** need to generate two histogram plots like this for each subsequent question! The examples are there to demonstrate the two possible approaches.

# (*Hint*: For each distribution, you'll need to find the appropriate `d<distribution name>()` function.).

### Question 1.1: Binomial Distribution

# Construct a plot of the probability mass histogram for a [Binomially-distributed](https://en.wikipedia.org/wiki/Binomial_distribution){target='_blank'} random variable $X$, with parameter values $n = 50$ and $p = 0.33$.

```{r}
#| label: q1-1-response
# Your code here
x <- 0:50
masses <- dbinom(x, size=50, prob=0.33)
plot(x, masses, type="h", xlab="Number of Successes", ylab="Probability", main="Binomial Distribution (n=50, p=0.33)")
```

```{r}
#| label: q1-1-ggplot
binom_df <- tibble::tibble(
  x = 0:50,
  pmass = dbinom(x, size=50, prob=0.33)
)
binom_df |> ggplot(aes(x=x, y=pmass)) +
  geom_bar(stat='identity')
```

#--- Explanation of the Base R Code ---

# First, we need to define a sequence of numbers representing possible outcomes.
# In the binomial case, these are the number of successes in 50 trials, so we create 
# a sequence from 0 to 50 using the colon operator (:).
x <- 0:50

# Next, we calculate the probability mass for each outcome using the dbinom() function.
# dbinom() gives us the probability of each number of successes based on the binomial 
# distribution, with the size (n) of 50 trials and probability (p) of success as 0.33.
masses <- dbinom(x, size=50, prob=0.33)

# Now, we use the plot() function to create a probability mass histogram.
# 'x' is the sequence of numbers (0 to 50), and 'masses' is the corresponding probability.
# The argument type="h" means we want vertical lines (like a histogram), and we label 
# the axes with xlab and ylab to show what we're plotting (Number of Successes vs Probability).
# main provides the title for the plot.
plot(x, masses, type="h", xlab="Number of Successes", ylab="Probability", 
     main="Binomial Distribution (n=50, p=0.33)")

#--- Explanation of the ggplot2 Code ---

# Now let's do the same thing using ggplot2, which requires us to first create a data frame.
# We use the tibble package here to create a data frame called binom_df.
# This data frame has two columns: 
# 'x' (0 to 50, the possible outcomes) and 'pmass' (the probability mass for each outcome).
binom_df <- tibble::tibble(
  x = 0:50, 
  pmass = dbinom(x, size=50, prob=0.33)
)

# Then, we create the plot using ggplot().
# aes(x=x, y=pmass) maps the x-axis to the sequence of outcomes (0 to 50)
# and the y-axis to the probabilities (pmass).
# geom_bar(stat='identity') creates the bars representing the probabilities.
binom_df |> ggplot(aes(x=x, y=pmass)) +
  geom_bar(stat='identity')

#--- Instructions for Running this in VS Code on Windows ---

# 1. Open your qmd file in VS Code.
# 2. Make sure you have the necessary R libraries installed: ggplot2 and tibble.
#    You can install them by running install.packages("ggplot2") and install.packages("tibble") if needed.
# 3. Add these code blocks to your qmd file between your R code blocks (```{r} and ```).
# 4. Save the file, and then execute the code either using the VS Code terminal or by running the chunks 
#    directly if you're using the R extension in VS Code.
# 5. When you knit or render the qmd file, these plots will be generated and included in your output.

#--- Summary ---

# - In base R, we use plot() to generate the probability mass histogram with vertical lines.
# - In ggplot2, we use ggplot() with geom_bar(stat='identity') to create the same plot but in a different style.
# - The key function for binomial distributions in R is dbinom(), which calculates the probabilities of each outcome.


For the remaining parts of the question, you only need to produce **one** plot, using either the base R `plot()` function **or** the `ggplot2` library.

### Question 1.2: Discrete Uniform

Construct a plot of the probability mass histogram for a [Discrete Uniform](https://en.wikipedia.org/wiki/Discrete_uniform_distribution){target='_blank'} random variable $X$, with parameter values $a = 10$ and $b = 20$.

To make this and subsequent questions a bit easier, you can install the [`extraDistr` package](https://www.rdocumentation.org/packages/extraDistr/versions/1.10.0){target='_blank'} by executing the following R command:

```{r}
# Set CRAN mirror
options(repos = c(CRAN = "https://cloud.r-project.org"))

# Install extraDistr package if not already installed
if (!require(extraDistr)) {
  install.packages("extraDistr")
}




```

And then you can use the additional functions provided by this library by starting your R code cell with:

``` {r}
library(extraDistr)
```

```{r}
#| label: q1-2-response

library(extraDistr)

# Define parameters 
a <- 10
b <- 20

# range of possible outcomes (10 to 20)
x <- a:b

# probability masses using the discrete uniform distribution
masses <- ddunif(x, min = a, max = b)

plot(x, masses, type="h", xlab="Outcomes", ylab="Probability", 
     main="Discrete Uniform Distribution (a=10, b=20)")


```
#--- Explanation of the Base R Code ---

# We are using the Discrete Uniform Distribution, where every integer between 
# 'a' and 'b' has an equal probability of being selected. 
# In this case, 'a = 10' and 'b = 20', meaning the possible outcomes are the integers 10 through 20.

# First, we install and load the extraDistr package, which contains functions for various 
# probability distributions, including the discrete uniform distribution.
# The if-statement checks if the package is already installed, and installs it if necessary.
options(repos = c(CRAN = "https://cloud.r-project.org"))

# Install extraDistr package if not already installed
if (!require(extraDistr)) {
  install.packages("extraDistr")
}

# Then we load the extraDistr library so we can use its functions in the current R session.
library(extraDistr)

# Now, we define the parameters 'a' and 'b' as 10 and 20, representing the range of possible outcomes.
a <- 10
b <- 20

# We create a sequence 'x' from 'a' to 'b', which gives us all the possible outcomes (10 to 20).
x <- a:b

# The function ddunif() computes the probability mass for each outcome in the sequence 'x',
# based on the discrete uniform distribution with the defined minimum and maximum values (a and b).
# Since it's a uniform distribution, each outcome has the same probability.
masses <- ddunif(x, min = a, max = b)

# Next, we use the plot() function to generate a probability mass histogram.
# 'x' represents the outcomes (10 to 20), and 'masses' represents the probabilities for each outcome.
# type="h" ensures we use vertical lines to represent the histogram.
plot(x, masses, type="h", xlab="Outcomes", ylab="Probability", 
     main="Discrete Uniform Distribution (a=10, b=20)")

#--- Instructions for Running this in VS Code on Windows ---

# 1. Open your qmd file in VS Code.
# 2. Make sure you have the extraDistr package installed. If it's not installed, 
#    the code above will handle the installation.
# 3. Add the code between ```{r} and ``` in your qmd file. 
#    This will generate the Discrete Uniform Distribution plot when executed.
# 4. Save and run the file in VS Code, either using the terminal or by executing code chunks.
# 5. The plot will be displayed when you knit or render the qmd file.

#--- Summary ---

# - The Discrete Uniform Distribution gives equal probabilities to all outcomes within a range.
# - In this case, we use the ddunif() function from the extraDistr package to compute the probabilities.
# - The range is defined by 'a' (minimum) and 'b' (maximum), and we plot the probabilities using plot().

### Question 1.3: Bernoulli Distribution

Construct a plot of the probability mass histogram for a [Bernoulli](https://en.wikipedia.org/wiki/Bernoulli_distribution){target='_blank'} random variable $X$, with parameter value $p = 0.25$.

```{r}
#| label: q1-3-response

# Parameter for Bernoulli distribution
p <- 0.25

# Outcomes are 0 and 1
x <- c(0, 1)

# probability masses for 0 and 1
masses <- c(1 - p, p)

#using base R
plot(x, masses, type="h", xlab="Outcomes", ylab="Probability", 
     main="Bernoulli Distribution (p=0.25)", ylim=c(0, 1))

```
#--- Explanation of the Base R Code ---

# The Bernoulli Distribution is the simplest discrete distribution, where there are only two possible outcomes:
# 0 (failure) and 1 (success). The probability of success is 'p', and the probability of failure is '1 - p'.
# In this question, we are given that the probability of success 'p' is 0.25.

# First, we define the parameter for the Bernoulli distribution.
p <- 0.25

# The outcomes in a Bernoulli distribution are always 0 and 1, 
# so we create a vector 'x' to represent these two outcomes.
x <- c(0, 1)

# Next, we calculate the probability mass for each outcome.
# Since the probability of success is 'p', the probability of failure is '1 - p'.
# We define the 'masses' vector where:
# - The probability of getting a 0 (failure) is 1 - p.
# - The probability of getting a 1 (success) is p.
masses <- c(1 - p, p)

# Now, we plot the probability mass histogram using the plot() function.
# - 'x' represents the outcomes (0 and 1).
# - 'masses' represents the probabilities for each outcome (1 - p for 0, and p for 1).
# - type="h" ensures we use vertical lines for the histogram.
# - xlab and ylab define labels for the x and y axes.
# - main gives the plot a title to indicate it's a Bernoulli distribution with p = 0.25.
# - ylim=c(0, 1) sets the limits for the y-axis to ensure the probability scale is visible from 0 to 1.
plot(x, masses, type="h", xlab="Outcomes", ylab="Probability", 
     main="Bernoulli Distribution (p=0.25)", ylim=c(0, 1))

#--- Summary ---

# - The Bernoulli distribution has two possible outcomes: 0 (failure) and 1 (success).
# - The probability of success is 'p', and the probability of failure is '1 - p'.
# - In this case, p = 0.25, meaning the probability of success is 25%, and the probability of failure is 75%.
# - The plot() function is used to generate the probability mass histogram, visualizing these two probabilities.

### Question 1.4: Poisson Distribution

Construct a plot of the probability mass histogram for a [Poisson](https://en.wikipedia.org/wiki/Poisson_distribution){target='_blank'} random variable $X$, with parameter value $\lambda = 4$.

```{r}
#| label: q1-4-response
lambda <- 4

x <- 0:15

masses <- dpois(x, lambda = lambda)

plot(x, masses, type="h", xlab="Outcomes", ylab="Probability", 
     main="Poisson Distribution (lambda=4)")


```

#--- Explanation of the Base R Code ---

# The Poisson Distribution is used to model the number of times an event happens in a fixed interval of time or space.
# The parameter for the Poisson distribution is 'lambda' (λ), which represents the average number of events 
# occurring in a given interval.

# In this case, we are given that λ (lambda) is 4, meaning we expect, on average, 4 events per interval.

# First, we define the lambda parameter for the Poisson distribution.
lambda <- 4

# Next, we create a sequence 'x' representing possible outcomes.
# The outcomes in a Poisson distribution are the counts of events, starting from 0 and going up.
# We use 0:15, which gives us the values 0 through 15 as possible counts of events.
x <- 0:15

# Now, we calculate the probability mass for each outcome using the dpois() function.
# The dpois() function computes the probability of observing each number of events (in this case, from 0 to 15)
# for a Poisson distribution with the given lambda.
# This gives us the probability of seeing 0, 1, 2, ..., 15 events in the interval, assuming λ = 4.
masses <- dpois(x, lambda = lambda)

# Now, we plot the probability mass histogram using the plot() function.
# - 'x' represents the possible outcomes (0 to 15, the number of events).
# - 'masses' represents the probabilities for each number of events.
# - type="h" ensures we use vertical lines to create a histogram-like plot.
# - xlab and ylab provide labels for the x-axis (Outcomes) and y-axis (Probability).
# - main gives the plot a title, indicating it's a Poisson distribution with λ = 4.
plot(x, masses, type="h", xlab="Outcomes", ylab="Probability", 
     main="Poisson Distribution (lambda=4)")

#--- Summary ---

# - The Poisson distribution is used to model the number of times an event occurs in a fixed interval.
# - The parameter λ (lambda) represents the average number of events per interval.
# - In this case, λ = 4, meaning we expect 4 events on average.
# - The dpois() function calculates the probability of each number of events occurring, from 0 to 15.
# - The plot() function is used to create the probability mass histogram, visualizing the likelihood of each outcome.


### Question 1.5: Geometric Distribution

Construct a plot of the probability mass histogram for a [Geometric](https://en.wikipedia.org/wiki/Geometric_distribution){target='_blank'} random variable $X$, with parameter values $p = 0.1$. Please use the **first** interpretation in the Wikipedia article, whereby $X$ is the number of **trials** required before obtaining a success.

```{r}
#| label: q1-5-response
p <- 0.1

x <- 0:20

masses <- dgeom(x, prob = p)

plot(x, masses, type="h", xlab="Number of Trials", ylab="Probability", 
     main="Geometric Distribution (p=0.1)")


```
#--- Explanation of the Base R Code ---

# The Geometric Distribution models the number of trials needed to get the first success in a series of 
# independent Bernoulli trials, where each trial has the same probability of success, 'p'.

# In this question, we are given that the probability of success 'p' is 0.1, which means there is a 10% 
# chance of success on each trial.

# First, we define the parameter 'p' for the Geometric distribution.
p <- 0.1

# The outcomes in a Geometric distribution represent the number of trials needed before we get the first success.
# So we create a sequence 'x' from 0 to 20, representing the possible numbers of trials required to get a success.
x <- 0:20

# Now, we calculate the probability mass for each outcome using the dgeom() function.
# The dgeom() function computes the probability of each number of trials (in this case, from 0 to 20) 
# for a Geometric distribution with the given probability of success 'p'.
# This gives us the probability that the first success will happen after 'x' trials.
masses <- dgeom(x, prob = p)

# Now, we plot the probability mass histogram using the plot() function.
# - 'x' represents the possible outcomes (the number of trials before the first success).
# - 'masses' represents the probability of each outcome (e.g., the chance of needing 1, 2, 3, etc., trials).
# - type="h" ensures we use vertical lines to represent the histogram.
# - xlab and ylab provide labels for the x-axis (Number of Trials) and y-axis (Probability).
# - main gives the plot a title to indicate it's a Geometric distribution with p = 0.1.
plot(x, masses, type="h", xlab="Number of Trials", ylab="Probability", 
     main="Geometric Distribution (p=0.1)")

#--- Summary ---

# - The Geometric distribution represents the number of trials required to get the first success.
# - The parameter 'p' is the probability of success in each trial, which is given as p = 0.1.
# - The dgeom() function calculates the probability of achieving the first success after a certain number of trials.
# - In this example, we calculate and plot the probability for 0 to 20 trials.
# - The plot() function is used to create a probability mass histogram, showing the likelihood of needing each number of trials.

### Question 1.6: Hypergeometric Distribution

Construct a plot of the probability mass histogram for a [Hypergeometric](https://en.wikipedia.org/wiki/Hypergeometric_distribution){target='_blank'} random variable $X$, with parameter values $N = 400$, $K = 50$, and $n = 150$.

```{r}
#| label: q1-6-response

# Parameters for Hypergeometric distribution
N <- 400  
K <- 50   
n <- 150  

# (number of successes in n draws)
x <- 0:min(K, n)  

#probability masses using the Hypergeometric distribution
masses <- dhyper(x, m = K, n = N - K, k = n)

plot(x, masses, type="h", xlab="Number of Successes", ylab="Probability", 
     main="Hypergeometric Distribution (N=400, K=50, n=150)")


```
#--- Explanation of the Base R Code ---

# The Hypergeometric Distribution is used to model the probability of getting a certain number of successes 
# in a sample drawn without replacement from a population. 
# It has three parameters:
# - N: Total population size.
# - K: Total number of successes in the population.
# - n: Number of draws (sample size).

# In this case, the parameters are:
# - N = 400 (the total population size),
# - K = 50 (the total number of successes in the population),
# - n = 150 (the number of draws or sample size).

# First, we define the parameters for the Hypergeometric distribution.
N <- 400  # Total population size
K <- 50   # Total number of successes in the population
n <- 150  # Sample size (number of draws)

# The possible outcomes for this distribution are the number of successes in 'n' draws.
# We create a sequence 'x' from 0 to the smaller of K and n (i.e., the possible number of successes).
x <- 0:min(K, n)

# Now, we calculate the probability mass for each outcome using the dhyper() function.
# The dhyper() function computes the probability of getting 'x' successes in 'n' draws from a population of size 'N', 
# where there are 'K' successes in the population.
# The arguments for dhyper() are:
# - x: The number of successes in the sample.
# - m: The number of successes in the population (K).
# - n: The number of failures in the population (N - K).
# - k: The number of draws (sample size, n).
masses <- dhyper(x, m = K, n = N - K, k = n)

# Now, we plot the probability mass histogram using the plot() function.
# - 'x' represents the possible outcomes (the number of successes in the sample).
# - 'masses' represents the probability of each outcome (e.g., the chance of getting 0, 1, 2, etc. successes).
# - type="h" ensures we use vertical lines for the histogram.
# - xlab and ylab provide labels for the x-axis (Number of Successes) and y-axis (Probability).
# - main gives the plot a title to indicate it's a Hypergeometric distribution with N=400, K=50, and n=150.
plot(x, masses, type="h", xlab="Number of Successes", ylab="Probability", 
     main="Hypergeometric Distribution (N=400, K=50, n=150)")

#--- Summary ---

# - The Hypergeometric distribution models the probability of getting a certain number of successes 
#   in a sample drawn without replacement from a population.
# - The parameters are:
#   - N: Total population size (400 in this case).
#   - K: Number of successes in the population (50 in this case).
#   - n: Number of draws (sample size, 150 in this case).
# - The dhyper() function is used to calculate the probability of getting each number of successes in 'n' draws.
# - The plot() function creates a probability mass histogram to visualize these probabilities.

### Question 1.7: Negative Binomial Distribution

Construct a plot of the probability mass histogram for a [Negative Binomial](https://en.wikipedia.org/wiki/Negative_binomial_distribution){target='_blank'} random variable $X$, with parameter values $r = 3$ and $p = 0.5$.

```{r}
#| label: q1-7-response

# Negative Binomial distribution
r <- 3   
p <- 0.5 

# failures ranging from 0 to 20)
x <- 0:20

#  probability masses using the Negative Binomial distribution
masses <- dnbinom(x, size = r, prob = p)

plot(x, masses, type="h", xlab="Number of Failures", ylab="Probability", 
     main="Negative Binomial Distribution (r=3, p=0.5)")


```
#--- Explanation of the Base R Code ---

# The Negative Binomial Distribution models the number of failures before achieving a specified number of successes 
# in a series of independent Bernoulli trials, where each trial has the same probability of success 'p'.

# In this case, we are given two parameters:
# - r = 3: The number of successes we are waiting for.
# - p = 0.5: The probability of success in each trial (50%).

# First, we define the parameters for the Negative Binomial distribution.
r <- 3   # Number of successes
p <- 0.5 # Probability of success in each trial

# The outcomes represent the number of failures before achieving 'r' successes.
# We create a sequence 'x' from 0 to 20, representing the possible number of failures.
x <- 0:20

# Now, we calculate the probability mass for each outcome using the dnbinom() function.
# The dnbinom() function computes the probability of observing each number of failures (in this case, 0 to 20 failures) 
# before achieving 'r' successes, with the given probability of success 'p'.
# The arguments for dnbinom() are:
# - x: The number of failures before the rth success.
# - size: The number of successes we are waiting for (r).
# - prob: The probability of success in each trial (p).
masses <- dnbinom(x, size = r, prob = p)

# Now, we plot the probability mass histogram using the plot() function.
# - 'x' represents the possible outcomes (the number of failures before reaching 3 successes).
# - 'masses' represents the probability of each outcome (e.g., the chance of getting 0, 1, 2, etc., failures before reaching 3 successes).
# - type="h" ensures we use vertical lines to represent the histogram.
# - xlab and ylab provide labels for the x-axis (Number of Failures) and y-axis (Probability).
# - main gives the plot a title to indicate it's a Negative Binomial distribution with r = 3 and p = 0.5.
plot(x, masses, type="h", xlab="Number of Failures", ylab="Probability", 
     main="Negative Binomial Distribution (r=3, p=0.5)")

#--- Summary ---

# - The Negative Binomial distribution models the number of failures before achieving a specified number of successes.
# - The parameters are:
#   - r: The number of successes (3 in this case).
#   - p: The probability of success in each trial (0.5 in this case).
# - The dnbinom() function calculates the probability of observing each number of failures before reaching 'r' successes.
# - The plot() function creates a probability mass histogram to visualize the probabilities of different failure counts.



## Question 2

Suppose there are fifteen multiple choice questions in `DSAN-5100` midterm test. Each question has four possible answers, and only one of them is correct. Find the probability of having four or less correct answers if a student attempts to answer every question at random, in the following two ways:

### Question 2.1

Compute the probability of having exactly 4 correct answers by random attempts using `dbinom()` and `pbinom()`.

```{r}
#| label: q2-1-response

#  binomial distribution
n <- 15       
p <- 0.25     
x <- 4        

# probability of getting exactly 4 correct answers
prob_exact_4 <- dbinom(x, size = n, prob = p)

# cumulative probability of getting 4 or fewer correct answers
prob_4_or_less <- pbinom(x, size = n, prob = p)

prob_exact_4
prob_4_or_less

```
#--- Explanation of the R Code ---

# In this problem, we are modeling a student's performance on a multiple-choice test using a Binomial Distribution.
# There are 15 questions in total, and each question has four possible answers, with only one being correct.
# The probability of randomly guessing the correct answer is 1/4 (or 0.25).
# We want to compute:
# 1. The probability of getting exactly 4 correct answers.
# 2. The cumulative probability of getting 4 or fewer correct answers.

# First, we define the parameters for the Binomial distribution:
# - n: The total number of trials (questions), which is 15.
# - p: The probability of success (correct answer) on each trial, which is 0.25 (since there are 4 possible answers).
n <- 15  # Total number of questions
p <- 0.25  # Probability of a correct answer (1 out of 4)
x <- 4  # We are interested in exactly 4 correct answers

# Now, we compute the probability of getting exactly 4 correct answers using the dbinom() function.
# The dbinom() function gives the probability of getting 'x' successes (in this case, exactly 4 correct answers)
# in 'n' trials, where each trial has a success probability 'p'.
prob_exact_4 <- dbinom(x, size = n, prob = p)

# Next, we calculate the cumulative probability of getting 4 or fewer correct answers using the pbinom() function.
# The pbinom() function gives the cumulative probability of getting 'x' or fewer successes 
# (in this case, 4 or fewer correct answers) in 'n' trials, where each trial has a success probability 'p'.
prob_4_or_less <- pbinom(x, size = n, prob = p)

# Finally, we output both probabilities:
# - prob_exact_4: The probability of getting exactly 4 correct answers.
# - prob_4_or_less: The cumulative probability of getting 4 or fewer correct answers.
prob_exact_4  # Probability of exactly 4 correct answers
prob_4_or_less  # Probability of 4 or fewer correct answers

#--- Summary ---

# - The dbinom() function calculates the probability of getting exactly 'x' successes (here, 4 correct answers) in 'n' trials.
# - The pbinom() function calculates the cumulative probability of getting 'x' or fewer successes (here, 4 or fewer correct answers) in 'n' trials.
# - In this problem, n = 15 (questions), p = 0.25 (chance of guessing a correct answer), and x = 4 (correct answers).
















### Question 2.2

Find the the probability of having four or less correct answers by random attempts using `dbinom()`.

```{r}
#| label: q2-2-response

# Parameters for  binomial distribution
n <- 15       
p <- 0.25     
x <- 0:4     

# probability of getting  0 to 4 correct answers
prob_4_or_less <- sum(dbinom(x, size = n, prob = p))

# Display  result
prob_4_or_less


```

### Question 2.3

Compute the above probability (from Question 2.2) using `pbinom()`.

```{r}
#| label: q2-3-response

# Parameters for binomial distribution
n <- 15       
p <- 0.25     
x <- 4        

# cumulative probability of getting 4 or fewer correct answers
prob_4_or_less <- pbinom(x, size = n, prob = p)

# Display the result
prob_4_or_less


```

## Question 3

Use R to compute the following probabilities.

### Question 3.1

Assume an insurance company receives 3 motor vehicle insurance claims per week. What is the probability $\Pr(X \leq 11)$ that they recieve 11 or fewer claims during a month?

```{r}
#| label: q3-1-response

# Poisson rate for a month
lambda_month <- 3 * 4  

# probability of receiving 11 or fewer claims
prob_11_or_less <- ppois(11, lambda = lambda_month)

prob_11_or_less


```

### Question 3.2

While you are at the Georgetown library terrace, you notice that airplanes fly at an average rate of 1 every 4 hours. What is the probability that you will see at least one plane in the next hour?

```{r}
#| label: q3-2-response

# Poisson rate per hour
lambda_per_hour <- 1 / 4  

# probability of seeing at least one plane
prob_at_least_one <- 1 - ppois(0, lambda = lambda_per_hour)

prob_at_least_one


```

## Question 4

Try using the `nbinom()` function to solve this example. (This relates to Problem-1 in the Lab-1 Assignment)

Mike decides to flip a coin until obtaining three successes (heads). Treating each coin flip as a trial, the successes occurred in trials 6, 8, and 9. This means that he had to perform 9 trials (coin flips) in total to obtain 3 successes (heads) in total.

Mathematically, we can model this procedure by defining a Random Variable $X$, whose distribution depends on a parameter $p$: $X$ will represent the number of total coin flips that are required before obtaining 3 successes, for a given success probability $p$.

Given the observed data (9 coin flips required for 3 successes), do you think that Mike is using a fair coin, so that his probability of heads is $p = 0.5$? Or is it an unfair coin with $p > 0.5$? Can a simulation give an answer? Let's try.

### Question 4.1

If Mike's success probability is $p = 0.5$ What is the probability that he will obtain these 3 successes within 9 trials?

```{r}
#| label: q4-1-response
r <- 3     
n <- 9      
p <- 0.5 

prob_3_successes_9_trials <- dnbinom(n - r, size = r, prob = p)

prob_3_successes_9_trials


```

### Question 4.2

Run $N = 10000$ simulations with this success probability ($p = 0.5$), and use the results to estimate this same probability $\Pr(X = 6)$ _Hint: Use `rnbinom()`_

```{r}
#| label: q4-2-response

# parameters
r <- 3     
p <- 0.5    
N <- 10000  

# 10,000 simulations, generating the number of failures before achieving 3 success
simulations <- rnbinom(N, size = r, prob = p)

# probability of getting exactly 6 failures 
estimated_prob <- mean(simulations == 6)

estimated_prob




```

### Question 4.3

If Mike's success probability $p$ was in fact greater than $0.5$ he would not need a lot of trials before obtaining 3 successes.

Using the two different approaches described below, find the probability $\Pr(X \geq 6)$ that three successes were reached after 9 tosses or more by somebody with success probability $p = 0.5$.

#### Question 4.3.1

First, calculate the probabiliy using `dnbinom()` and `pnbinom()`.

```{r}
#| label: q4-3a-response

# Negative Binomial distribution
r <- 3      
p <- 0.5    

# cumulative probability of getting fewer than 6 failures

prob_less_than_6 <- pnbinom(5, size = r, prob = p)

# probability of getting 6 or more failures (which corresponds to 9 or more trials)
prob_6_or_more <- 1 - prob_less_than_6

prob_6_or_more


```

#### Question 4.3.2

Now, calculate this probability without using `dnbinom()`, by simulating $N = 10000$ different runs of Mike's procedure.

```{r}
#| label: q4-3b-response

# parameters
r <- 3      
p <- 0.5    
N <- 10000  

# 10,000 simulations, generating the number of failures before achieving 3 successes
simulations <- rnbinom(N, size = r, prob = p)

# Eprobability of getting 6 or more failures (which corresponds to 9 or more trials)
estimated_prob_6_or_more <- mean(simulations >= 6)

estimated_prob_6_or_more

```

#### Question 4.3.3

Is this probability (part b) the same as you got using `myattempts()`: Lab 1 Assignment Problem 1 part 3?

> result obtained in this assignment being 0.1447, differs significantly from when i used the myattemps function where i got 0.0018. This could mean that the two methods are looking at slightly different situations, or that there's some randomness in the simulation. Because the difference is so big, it might help to double-check the setup or try running more simulations to get a more accurate result.
